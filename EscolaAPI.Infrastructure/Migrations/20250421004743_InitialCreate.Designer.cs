// <auto-generated />
using System;
using EscolaAPI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EscolaAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421004743_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CursoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataIngresso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Alunos", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Aula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TurmaId");

                    b.ToTable("Aulas", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Avaliacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TurmaId");

                    b.ToTable("Avaliacoes", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CargaHorariaTotal")
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Cursos", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CordenadorId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CordenadorId");

                    b.ToTable("Departamentos", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("int");

                    b.Property<int>("Codigo")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Disciplinas", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.DisciplinaPreRequisito", b =>
                {
                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<int>("PreRequisitoId")
                        .HasColumnType("int");

                    b.HasKey("DisciplinaId", "PreRequisitoId");

                    b.HasIndex("PreRequisitoId");

                    b.ToTable("DisciplinasPreRequisitos", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId")
                        .IsUnique();

                    b.ToTable("Enderecos", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Especializacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Especializacoes", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Frequencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AulaId")
                        .HasColumnType("int");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Presente")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("MatriculaId");

                    b.ToTable("Frequencias", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataGeracao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId")
                        .IsUnique();

                    b.ToTable("Historicos", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.ItemHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<int>("HistoricoId")
                        .HasColumnType("int");

                    b.Property<decimal>("NotaFinal")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Semestre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("HistoricoId");

                    b.ToTable("ItensHistorico", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Matricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataMatricula")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("TurmaId");

                    b.ToTable("Matriculas", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvaliacaoId")
                        .HasColumnType("int");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoId");

                    b.HasIndex("MatriculaId");

                    b.ToTable("Notas", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataContratacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Titulacao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Professores", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.ProfessorDisciplina", b =>
                {
                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataHabilitacao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EhResponsavel")
                        .HasColumnType("bit");

                    b.HasKey("ProfessorId", "DisciplinaId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("ProfessorDisciplinas", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Turma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<int>("CapacidadeMaxima")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<int>("Horario")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("Sala")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Semestre")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Turmas", (string)null);
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Aluno", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Curso", null)
                        .WithMany("Alunos")
                        .HasForeignKey("CursoId");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Aula", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Turma", "Turma")
                        .WithMany("Aulas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Avaliacao", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Turma", "Turma")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Curso", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Departamento", "Departamento")
                        .WithMany("Cursos")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Departamento", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Professor", "Cordenador")
                        .WithMany()
                        .HasForeignKey("CordenadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cordenador");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Disciplina", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Curso", "Curso")
                        .WithMany("Disciplinas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.DisciplinaPreRequisito", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany("PreRequisitos")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EscolaAPI.Domain.Entities.Disciplina", "PreRequisito")
                        .WithMany("DisciplinasQuePreRequisitamEsta")
                        .HasForeignKey("PreRequisitoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disciplina");

                    b.Navigation("PreRequisito");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Aluno", "Aluno")
                        .WithOne("Endereco")
                        .HasForeignKey("EscolaAPI.Domain.Entities.Endereco", "AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Especializacao", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Professor", "Professor")
                        .WithMany("Especializacoes")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Frequencia", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Aula", "Aula")
                        .WithMany("Frequencias")
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EscolaAPI.Domain.Entities.Matricula", "Matricula")
                        .WithMany("Frequencias")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aula");

                    b.Navigation("Matricula");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Historico", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Aluno", "Aluno")
                        .WithOne("Historico")
                        .HasForeignKey("EscolaAPI.Domain.Entities.Historico", "AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.ItemHistorico", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EscolaAPI.Domain.Entities.Historico", "Historico")
                        .WithMany("Itens")
                        .HasForeignKey("HistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disciplina");

                    b.Navigation("Historico");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Matricula", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Aluno", "Aluno")
                        .WithMany("Matriculas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EscolaAPI.Domain.Entities.Turma", "Turma")
                        .WithMany("Matriculas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Nota", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Avaliacao", "Avaliacao")
                        .WithMany("Notas")
                        .HasForeignKey("AvaliacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EscolaAPI.Domain.Entities.Matricula", "Matricula")
                        .WithMany("Notas")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avaliacao");

                    b.Navigation("Matricula");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Professor", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Departamento", "Departamento")
                        .WithMany("Professores")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.ProfessorDisciplina", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany("Professores")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EscolaAPI.Domain.Entities.Professor", "Professor")
                        .WithMany("Disciplinas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disciplina");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Turma", b =>
                {
                    b.HasOne("EscolaAPI.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany("Turmas")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EscolaAPI.Domain.Entities.Professor", "Professor")
                        .WithMany("Turmas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disciplina");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Aluno", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Historico")
                        .IsRequired();

                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Aula", b =>
                {
                    b.Navigation("Frequencias");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Avaliacao", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Curso", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Disciplinas");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Cursos");

                    b.Navigation("Professores");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Disciplina", b =>
                {
                    b.Navigation("DisciplinasQuePreRequisitamEsta");

                    b.Navigation("PreRequisitos");

                    b.Navigation("Professores");

                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Historico", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Matricula", b =>
                {
                    b.Navigation("Frequencias");

                    b.Navigation("Notas");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Professor", b =>
                {
                    b.Navigation("Disciplinas");

                    b.Navigation("Especializacoes");

                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("EscolaAPI.Domain.Entities.Turma", b =>
                {
                    b.Navigation("Aulas");

                    b.Navigation("Avaliacoes");

                    b.Navigation("Matriculas");
                });
#pragma warning restore 612, 618
        }
    }
}
